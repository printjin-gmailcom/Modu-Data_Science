# -*- coding: utf-8 -*-
"""v.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z1dF-5E2_L1rY__8GSIQSh_Ovlj8wg_W
"""

import numpy as np
numbers = np.array(range(1, 11), copy=True)
members

ones = np.ones([2, 4], dtype=np.float64)
ones

zeros = np.zeros([2, 4], dtype=np.float64)
zeros

empty = np.empty([2, 4], dtype=np.float64)
empty

ones.shape

numbers.ndim

zeros.dtype

eye = np.eye(3, k=1) # 단위 행렬
eye

np_numbers = np.arange(2, 5, 0.25)
np_numbers

np_inumbers = np_numbers.astype(np.int)
np_inumbers



sap = np.array(["MMM", "ABT", "ABBV", "ACN", "ACE", "ATVI", "ADBE", "ADT"]) # 주식 기호들임. 특별한 의미 x
sap

sap2d = sap.reshape(2, 4)
sap2d

sap3d = sap.reshape(2, 2, 2)
sap3d

sap2d.T

sap3d.swapaxes(1, 2) # array의 축을 바꾸는 것

sap3d.transpose((0, 2, 1))



dirty = np.array([9, 4, 1, -0.01, -0.02, -0.001])
whos_dirty = dirty < 0
whos_dirty

dirty[whos_dirty] = 0
dirty

linear = np.arange(-1, 1.1, 0.2)
(linear <= 0.5) & (linear >= -0.5)

sap[[1, 2, -1]]

sap2d[:, [1]]



a = np.arange(4)
b = np.arange(1, 5)
a+b

a*5

noise = np.eye(4) + 0.01 * np.ones((4, ))
noise

noise = np.eye(4) + 0.01 * np.random.random([4, 4])
np.round(noise, 2)



stocks = np.array([140.49, 0.97, 40.68, 41.53, 55.7, 57.21, 98.2, 99.19, 109.96, 111.47, 35.71, 36.27, 87.85, 89.11, 30.22, 30.91])
stocks

stocks = stocks.reshape(8, 2).T
stocks

fall = np.greater(stocks[0], stocks[1]) # 열별 가격 비교
fall

sap[fall]

stocks[1, 0] = np.nan
np.isnan(stocks)

stocks[np.isnan(stocks)] = 0
stocks



changes = np.where(np.abs(stocks[1] - stocks[0]) > 1.00,
                   stocks[1] - stocks[0], 0)
changes

sap[np.nonzero(changes)]

sap[np.abs(stocks[1] - stocks[0]) > 1.00]

sap[         np.abs(stocks[0] - stocks[1])
   > np.mean(np.abs(stocks[0] - stocks[1]))]



import numpy as np
import matplotlib.pyplot as plt
import matplotlib

RATE = .0375
TERM = 30
simple =   (     RATE  * np.ones(TERM)).cumsum()
compound = ((1 + RATE) * np.ones(TERM)).cumprod() - 1



matplotlib.style.use("ggplot")
t = np.arange(1, 31)
plt.plot(t, compound)
plt.plot(t, simple)
plt.legend(["Compound", "Simple"], loc=2)
plt.xlabel("Year")
plt.ylabel("Accrued Interest")
plt.tight_layout()
plt.savefig("interest.pdf")



dna = "AGTCCGCGAATACAGGCTCGGT"
dna_as_array = np.array(list(dna))
dna_as_array

np.unique(dna_as_array)

np.in1d(["MSFT", "MMM", "AAPL"], sap)



np.save("sap.npy", sap)
sap_copy = np.load("sap")



import numpy as np
import matplotlib.pyplot as plt
import matplotlib

# 가우시안 잡음
SIG_AMPLITUDE = 10; SIG_OFFSET = 2; SIG_PERIOD = 100
NOISE_AMPLITUDE = 3
N_SAMPLES = 5 * SIG_PERIOD
INSTRUMENT_RANGE = 9

times = np.arange(N_SAMPLES).astype(float)
signal = SIG_AMPLITUDE * np.sin(2 * np.pi * times / SIG_PERIOD) + SIG_OFFSET
noise = NOISE_AMPLITUDE * np.random.normal(size=N_SAMPLES)
signal += noise

signal[signal > INSTRUMENT_RANGE] = INSTRUMENT_RANGE
signal[signal < -INSTRUMENT_RANGE] = -INSTRUMENT_RANGE

matplotlib.style.use("ggplot")
plt.plot(times, signal)
plt.title("Synthetic sine wave signal")
plt.xlabel("Time")
plt.ylabel("Signal + noise")
plt.ylim(ymin = -SIG_AMPLITUDE, ymax = SIG_AMPLITUDE)

plt.savefig("signal.pdf")






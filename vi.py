# -*- coding: utf-8 -*-
"""vi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZYjtmbuXAc5orqHaUz5DcIYO8zpFH4xX
"""

import pandas as pd
inflation = pd.Series((2.2, 3.4, 2.8, 1.6, 2.3, 2.7, 3.4, 3.2, 2.8, 3.8, -0.4, 1.6, 3.2, 2.1, 1.5, 1.5))
inflation

len(inflation)

inflation.values

inflation.index

inflation.index.values

inflation = pd.Series({1999 : 2.2, 2000 : 3.4, 2001 : 2.8, 2002 : 1.6, 2003 : 2.3, 2004 : 2.7, 2005 : 3.4, 2006 : 3.2, 2007 : 2.8, 2008 : 3.8, 2009 : -0.4, 2010 : 1.6, 2011 : 3.2, 2012 : 2.1, 2013 : 1.5, 2014 : 1.6, 2015 : np.nan})

inflation = pd.Series((2.2, 3.4, 2.8, 1.6, 2.3, 2.7, 3.4, 3.2, 2.8, 3.8, -0.4, 1.6, 3.2, 2.1, 1.6, 1.5))
inflation.index = pd.Index(range(1999, 2015))
inflation[2015] = numpy.nan

inflation.index.name = "Year"
inflation.name = "%"
inflation

inflation.head()

inflation.tail()

import pandas as pd
alco2009 = pd.read_csv("niaaa-report2009.csv", index_col="State")
alco2009

alco2009["Wine"].head()

alco2009.Beer.tail()

alco2009["Total"] = 0
alco2009.head()



alco2009.columns.values

alco2009.index.values

alco2009.reset_index().set_index("Beer").head()

alco2009.ix["Nebraska"]

"Samoa" in alco2009.index

alco2009 = pd.read_csv("niaaa-report2009.csv", index_col="State")
"Samoa" in alco2009.index

s_states = [state for state in alco2009.index if state[0] == 'S'] + ["Samoa"]
drinks = list(alco2009.columns) + ["Water"]
nan_alco = alco2009.reindex(s_states, columns=drinks)
nan_alco

alco = pd.read_csv("niaaa-report.csv", index_col=[“State”, “Year”])
alco

alco.index = multi

alco.ix['Wyoming'].head()

alco.ix['Wyoming', 1999]

tall_alco = alco.stack()
tall_alco.index.names = [“State”, “Year”, “Drink”]
tall_alco.head(10)

wide_alco = alco.unstack()
wide_alco.head()

alco = pd.read_csv("niaaa-report.csv")
alco.pivot("Year", "State", "Wine")



nan_alco.dropna(how="all")

nan_alco.dropna(how="all", axis=1)

nan_alco.dropna()

nan_alco.isnull()

nan_alco.notnull()

sp = nan_alco['Spirits']
clean = sp.notnull()
sp[-clean] = sp[clean].mean()
nan_alco

nan_alco.fillna(0)

nan_alco.fillna(method="ffill")

population = pd.read_csv("population.csv", index_col="State")
population.head()

df = pd.merge(alco2009.reset_index(),
     population.reset_index()).set_index("State")
df.head()

df = pd.merge(alco2009, population, left_index=True, right_index=True)
df.head()

population.join(alco2009).tail(10)

pd.concat([alco2009, population], axis=1).tail()

pop_ca = pd.read_csv("demo02a-eng.csv", index_col="State")
pop_ca

pop_na = pd.concat([population, pop_ca], keys=["US", "CA"])
pop_na.index.names = ("Country", "State")
pop_na



population.sort_index().head()

population.sort_values("Population").head()

pop_by_state = population.sort_index()
pop_by_state.rank().head()

alco2009.max()

alco2009.min(axis=1)

alco2009.sum()

alco.index = multi

alco['Total'] = alco.Beer + alco.Wine + alco.Spirits

import pickle
with open(“alco.pickle”, “wb”) as oFile:
  pickle.dump(alco, oFile)

alco.ix['Hawaii'].cumsum().head()

alco.ix['Hawaii'].diff().head()

dna = "AGTCCGCGAATACAGGCTCGGT"
dna_as_series = pd.Series(list(dna), name="genes")
dna_as_series.head()

dna_as_series.unique()

dna_as_series.value_counts().sort_index()

valid_nucs = list("ACGT")
dna_as_series.isin(valid_nucs).all()



alco["Total"] = alco.Wine + alco.Spirits + alco.Beer
alco.head()

np.log10(alco.Total).head()

dna = "AGTCCGCGAATACAGGCTCGGT"
dna1 = dna.replace("C", "")
dna2 = dna.replace("T", "")
dna_as_series1 = pd.Series(list(dna1), name="genes") # C 제거
dna_as_series2 = pd.Series(list(dna2), name="genes") # T 제거
dna_as_series1.value_counts() + dna_as_series2.value_counts()

alco_noidx = alco.reset_index()
sum_alco = alco_noidx.groupby("Year").sum()
sum_alco.tail()

state2reg = {'Connecticut' : 'NORTHEAST', 'Maine' : 'NORTHEAST', 'Massachusetts' : 'NORTHEAST', 'New Hampshire' : 'NORTHEAST', 'Rhode Island' : 'NORTHEAST', 'Vermont' : 'NORTHEAST', 'New Jersey' : 'NORTHEAST', 'New York' : 'NORTHEAST','Pennsylvania': 'NORTHEAST', 'Illinois': 'MIDWEST', 'Indiana': 'MIDWEST', 'Michigan': 'MIDWEST', 'Ohio': 'MIDWEST', 'Wisconsin': 'MIDWEST', 'Iowa': 'MIDWEST', 'Kansas': 'MIDWEST',
'Minnesota': 'MIDWEST', 'Missouri': 'MIDWEST', 'Nebraska': 'MIDWEST', 'North Dakota': 'MIDWEST', 'South Dakota': 'MIDWEST', 'Delaware': 'SOUTH',
'District of Columbia': 'SOUTH', 'Florida': 'SOUTH', 'Georgia': 'SOUTH', 'Maryland': 'SOUTH', 'North Carolina': 'SOUTH', 'South Carolina': 'SOUTH',
'Virginia': 'SOUTH', 'West Virginia': 'SOUTH', 'Alabama': 'SOUTH', 'Kentucky': 'SOUTH', 'Mississippi': 'SOUTH', 'Tennessee': 'SOUTH', 'Arkansas': 'SOUTH',
'Louisiana': 'SOUTH', 'Oklahoma': 'SOUTH', 'Texas': 'SOUTH', 'Arizona': 'WEST', 'Colorado': 'WEST', 'Idaho': 'WEST', 'Montana': 'WEST', 'Nevada': 'WEST',
'New Mexico': 'WEST', 'Utah': 'WEST', 'Wyoming': 'WEST', 'Alaska': 'WEST', 'California': 'WEST', 'Hawaii': 'WEST', 'Oregon': 'WEST', 'Washington': 'WEST'}

state2reg

alco2009.groupby(state2reg).mean()

cats = pd.cut(alco2009['Wine'], 3).head()
cats

cats = pd.cut(alco2009['Wine'], 3, labels=("Low", "Moderate", "Heavy"))
cats.head()

cats = pd.cut(alco2009['Wine'], 3, labels=False).head()
cats

quants = pd.qcut(alco2009['Wine'], 3, labels=("Low", "Moderate", "Heavy"))
quants.head()

pd.get_dummies(pd.Series(state2reg)).sort_index().head()

with_state = alco2009.reset_index()
abbrevs = with_state["State"].map(lambda x: x[:3].upper())
abbrevs.head()

wine_state = alco2009["Wine"] > alco2009["Wine"].mean()
beer_state = alco2009["Beer"] > alco2009["Beer"].mean()
pd.crosstab(wine_state, beer_state)



regions = pd.read_csv("regions.csv",
                     header=None,
                     names=("region", "division", "state"))
state2reg_series = regions.ffill().set_index("state")["region"]
state2reg_series.head()

state2reg = state2reg_series.to_dict()
state2reg

chunker = pd.read_csv("regions.csv", chunksize=5,
                      header=None, names=("region", "division", "state"))

accum = pd.Series()
for piece in chunker:
    counts = piece["region"].value_counts()
    accum = accum.add(counts, fill_value=0)


accum



# read_json()
# read_fwf()
# read_clipboard()



